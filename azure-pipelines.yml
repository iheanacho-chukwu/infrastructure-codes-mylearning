name: Infrastructure-Deployment-$(Build.SourceBranchName)-$(Date:yyyyMMdd)

variables:
  TFSTATE_SA: iacbootslab
  TFSTATE_CONTAINER: tfstate-demo
  TFSTATE_KEY: terraform.tfstate
  TFSTATE_RG: demo
  SVC_CONNECTION: eng-lab-automation
  ARM_SUBCRIPTION_ID: 800eeb5c-ab87-468f-800b-d9ca632b4f73

trigger:
- duplicate_tf_build

pool: linux-agent-pool

stages: 
- stage: Terraform_build
  jobs:
  - job: Build
    steps:

    # - task: TerraformInstaller@0
    #   displayName: 'package requirements'
    #   inputs:
    #     terraformVersion: 'latest'

    - task: TerraformCLI@0
      displayName: 'Initialization'
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/dev'
        commandOptions: '-upgrade'
        backendType: 'azurerm'
        backendServiceArm: '$(SVC_CONNECTION)'
        backendAzureRmSubscriptionId: '$(ARM_SUBCRIPTION_ID)'
        backendAzureRmResourceGroupName: '$(TFSTATE_RG)'
        backendAzureRmStorageAccountName: '$(TFSTATE_SA)'
        backendAzureRmContainerName: '$(TFSTATE_CONTAINER)'
        backendAzureRmKey: '$(TFSTATE_KEY)'
        allowTelemetryCollection: true

    - task: TerraformCLI@0
      displayName: 'Exective Plan'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/dev'
        environmentServiceName: $(SVC_CONNECTION)
        providerAzureRmSubscriptionId: $(ARM_SUBCRIPTION_ID)
        allowTelemetryCollection: true
        commandOptions: -lock=false -input=false -out=output.tfplan

    - task: TerraformCLI@0
      displayName: Deploy
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/dev'
        environmentServiceName: $(SVC_CONNECTION)
        providerAzureRmSubscriptionId: $(ARM_SUBCRIPTION_ID)
        commandOptions: '-input=false'
        allowTelemetryCollection: false

    # - task: PublishBuildArtifacts@1
    #   displayName: 'Publish tfplan file as artifact for use in Deploy stage'
    #   inputs:
    #     PathtoPublish: '$(Build.SourcesDirectory)'
    #     ArtifactName: 'tfplan'
    #     publishLocation: 'Container'
  
  
# - stage: Run_Terraform_Apply
#   condition: eq(variables['Build.SourceBranch'], 'refs/heads/duplicate_tf_build')
#   dependsOn: Terraform_build
#   jobs:
#   - deployment: Apply
#     environment: infra_env
#     strategy:
#       runOnce:
#         deploy:
#           steps:

#           - task: DownloadBuildArtifacts@0
#             inputs:
#               buildType: 'current'
#               downloadType: 'single'
#               artifactName: 'tfplan'
#               downloadPath: '$(Build.SourcesDirectory)'

#           - task: CmdLine@2
#             inputs:
#               script: 'Expand-Archive -LiteralPath $(Build.SourcesDirectory) -DestinationPath $(Build.SourcesDirectory)'

#           - task: TerraformCLI@0
#             displayName: 'Initialization'
#             inputs:
#               command: 'init'
#               workingDirectory: '$(System.DefaultWorkingDirectory)/dev'
#               commandOptions: '-upgrade'
#               backendType: 'azurerm'
#               backendServiceArm: '$(SVC_CONNECTION)'
#               backendAzureRmSubscriptionId: '$(ARM_SUBCRIPTION_ID)'
#               backendAzureRmResourceGroupName: '$(TFSTATE_RG)'
#               backendAzureRmStorageAccountName: '$(TFSTATE_SA)'
#               backendAzureRmContainerName: '$(TFSTATE_CONTAINER)'
#               backendAzureRmKey: '$(TFSTATE_KEY)'
#               allowTelemetryCollection: true

#           - task: TerraformCLI@0
#             displayName: Deploy
#             inputs:
#               command: 'apply'
#               workingDirectory: '$(System.DefaultWorkingDirectory)/dev'
#               environmentServiceName: $(SVC_CONNECTION)
#               providerAzureRmSubscriptionId: $(ARM_SUBCRIPTION_ID)
#               commandOptions: -input=false -auto-approve output.tfplan 
#               allowTelemetryCollection: false

